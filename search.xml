<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[nvim_plugin]]></title>
    <url>%2F2019%2F11%2F10%2Fnvim_plugin%2F</url>
    <content type="text"><![CDATA[Vim 插件开发指南 简介 基本语法 注释 变量 作用域 Vim 插件的项目结构 Vim 自定义命令 推荐阅读 简介Vim 插件开发中文指南，主要包括 Vim 脚本语法、插件开发技巧等。 基本语法注释在写脚本时，经常需要在源码里面添加一些注释信息，辅助阅读源码，Vim 脚本注释比较简单，是以 &quot; 开头的，只存在行注释，不存在块注释。因此，对于多行注释，需要再每行开头添加 &quot;。 示例： 12" 这是一行注释，let g:helloworld = 1 " 这是在行尾注释 变量在 Vim 脚本里，可以使用关键字 let 来申明变量，最基本的方式为： 12" 定义一个类型是字符串的变量 g:helloworldlet g:helloworl = "sss" 前面的例子中，是定义一个字符串，Vim 脚本中支持以下几种数据类型： 类型 ID 描述 Number 0 整数 String 1 字符串 Funcref 2 函数指针 List 3 列表 Dictionary 4 字典 Float 5 浮点数 Boolean 6 None 7 Job 8 Channel 9 作用域Vim 变量存在三种作用域，全局变量、局部变量、和脚本变量。通常，我们以不同的前缀来区别作用域，比如使用 g: 表示全局变量，s: 表示脚本变量。在一些特殊情况下，前缀是可以省略的，Vim 会为该变量选择默认的作用域。不同的情况下，默认的作用域是不一样的，在函数内部，默认作用域是局部变量，而在函数外部，默认作用域是全局变量： 1234567let g:helloworld = 1 " 这是一个全局变量， g: 前缀未省略let helloworld = 1 " 这也是一个全局变量，在函数外部，默认的作用域是全局的function! HelloWorld() let g:helloworld = 1 " 这是函数内部全局变量 let helloworld = 1 " 这是一个函数内部的局部变量，在函数内部，默认的作用域为局部变量endfunction 前缀 描述 g: 全局变量 l: 局部变量，只可在函数内部使用 s: 脚本变量，只可以在当前脚本函数内使用 v: Vim 特殊变量 b: 作用域限定在某一个缓冲区内 w: 作用域限定在窗口内部 t: 作用域限定在标签内部 此外，在开发 Vim 插件之前，你还需要了解 vimrc 和 Vim 插件的区别。 Vim 插件的项目结构在开发 Vim 插件之前，需要了解一下，一个 Vim 插件项目的目录结构是怎样的，以及每一个目录里文件的意义是什么。 Vim 插件标准的目录结构为： 12345678autoload/ 自动载入脚本colors/ 颜色主题plugin/ 在 Vim 启动时将被载入的脚本ftdetect/ 文件类型识别脚本syntax/ 语法高亮文件ftplugin/ 文件类型相关插件compiler/ 编译器indent/ 语法对齐 下面，我们来逐一说明下每一个目录的用途： autoload/ 顾名思义，该文件夹下的脚本会在特点条件下自动被载入。这里的特定条件指的是当某一个 autoload 类型的函数被调用，并且 Vim 当前环境下并未定义该函数时。比如调用 call helloworld#init() 时，Vim 会先检测当前环境下是否定义了该函数，若没有，则在 autoload/ 目录下找 helloworld.vim 这一文件，并将其载入，载入完成后执行 call helloworld#init(). plugin/ 该目录里的文件将在 Vim 启动时被运行，作为一个优秀的 Vim 插件，应当尽量该目录下的脚本内容。通常，可以将插件的快捷键、命令的定义保留在这个文件里。 ftdetect/ ftdetect 目录里通常存放的是文件类型检测脚本，该目录下的文件也是在 Vim 启动时被载入的。在这一目录里的文件内容，通常比较简单，比如： 1autocmd BufNewFile,BufRead *.helloworld set filetype=helloworld 以上脚本使得 Vim 在打开以 .helloworld 为后缀的文件时，将文件类型设置为 helloworld。通常，这个脚本的文件名是和所需要设置的文件类型一样的，上面的例子中文件的名称就是 helloworld.vim。 syntax/ 这一目录下的文件，主要是定义语法高亮的。通常文件名前缀和对应的语言类型相同，比如 Java 的语法文件文件名为 java.vim。 关于如何写语法文件，将在后面详细介绍。 colors/ colors 目录下主要存储一些颜色主题脚本，当执行 :colorscheme + 主题名 命令时，对应的颜色主题脚本将被载入。比如执行 :colorscheme helloworld 时，colors/helloworld.vim 这一脚本将被载入。 compiler/ 这一名录里是一些预设的编译器参数，主要给 :make 命令使用的。在最新版的 Vim 中可以使用 :compiler! 编译器名 来为当前缓冲区设定编译器。比如当执行:compiler! helloworld 时，compiler/helloworld.vim 这一脚本将被载入。 indent/ 在 indent 目录里，主要是一些语法对齐相关的脚本。 Vim 自定义命令Vim 的自定义命令可以通过 command 命令来定义，比如： 1command! -nargs=* -complete=custom,helloworld#complete HelloWorld call helloworld#test() 紧接 command 命令其后的 ! 表示强制定义该命令，即使前面已经定义过了同样名称的命令，也将其覆盖掉。 -nargs=* 表示，该命令可接受任意个数的参数，包括 0 个。-nargs 的取值有以下几种情况： 参数 定义 -nargs=0 不接受任何参数（默认） -nagrs=1 只接受一个参数 -nargs=* 可接收任意个数参数 -nargs=? 可接受 1 个或者 0 个参数 -nargs=+ 至少提供一个参数 -complete=custom,helloworld#complete 表示，改命令的补全方式采用的是自定义函数 helloworld#complete。-complete 可以接受的参数包括如下内容： 参数 描述 -complete=augroup autocmd 组名 -complete=buffer buffer 名称 -complete=behave :behave 命令子选项 -complete=color 颜色主题 -complete=command Ex 命令及参数 -complete=compiler 编译器 -complete=cscope :cscope 命令子选项 -complete=dir 文件夹名称 -complete=environment 环境变量名称 -complete=event 自动命令的事件名称 -complete=expression Vim 表达式 -complete=file 文件及文件夹名称 -complete=file_in_path path 选项里的文件及文件夹名称 -complete=filetype 文件类型 -complete=function 函数名称 -complete=help 帮助命令子选项 -complete=highlight 高亮组名称 -complete=history :history 子选项 -complete=locale locale 名称（相当于命令 locale -a 的输出） -complete=mapping 快捷键名称 -complete=menu 目录 -complete=messages :messages 命令子选项 -complete=option Vim 选项名称 -complete=packadd 可选的插件名称补全 -complete=shellcmd shell 命令补全 -complete=sign :sign 命令补全 -complete=syntax 语法文件名称补全 -complete=syntime :syntime 命令补全 -complete=tag tags -complete=tag_listfiles tags, file names are shown when CTRL-D is hit -complete=user user names -complete=var user variables -complete=custom,{func} custom completion, defined via {func} -complete=customlist,{func} custom completion, defined via {func} 这里主要解释一些自定义的补全函数，从上面的表格可以看出，有两种定义自定义命令补全函数的方式。-complete=custom,{func} 和 -complete=customlist,{func}。这两种区别在与函数的返回值，前者要求是一个 string 而后者要求补全函数的返回值是 list.自定义命令补全函数接受三个参数。 1:function &#123;func&#125;(ArgLead, CmdLine, CursorPos) 我们以实际的例子来解释这三个参数的含义，比如在命令行是如下内容时，| 表示光标位置，我按下了 &lt;Tab&gt; 键调用了补全函数，那么传递给补全函数的三个参数分别是： 1:HelloWorld hello| 参数名 描述 ArgLead 当前需要补全的部分，通常是光标前的字符串，上面的例子中是指 hello CmdLine 指的是整个命令行内的内容，此时是 HelloWorld hello CursorPos 指的当前光标所在的位置，此时是 16, 即为 len(&#39;HelloWorld hello&#39;) 下面，我们来看下定义的函数具体内容： 1234function! helloworld#complete(ArgLead, CmdLine, CursorPos) abort return join(['hellolily', 'hellojeky', 'hellofoo', 'world'] \ "\n")endfunction 在上面的函数里，返回的实际上是一个有四行的字符串，Vim 会自动根据 ArgLead 来筛选出可以用来补全的选项，并展示在状态栏上。此时，四行里最后一个 world 因为开头不匹配 ArgLead 所以不会被展示在状态栏上，因此补全效果只有三个可选项。 -complete=customlist,{func} 这一参数所对应的补全函数，也是接受相同的三个参数，但该函数返回的是一个 list。 下面，我们来测试这个函数： 123function! helloworld#complete(ArgLead, CmdLine, CursorPos) abort return ['hellolily', 'hellojeky', 'hellofoo', 'world']endfunction 区别很明显，customlist 补全时不会自动根据 ArgLead 进行筛选，并且直接补全整个返回的 list，即使列表中有一个 world 完全与 ArgLead(hello) 不同，也会将其直接覆盖。因此，当使用 customlist 时，需要在函数内根据 ArgLead 进行筛选，将函数该为如下，就可以得到相同效果了： 123function! helloworld#complete(ArgLead, CmdLine, CursorPos) abort return filter(['hellolily', 'hellojeky', 'hellofoo', 'world'], 'v:val =~ "^" . a:ArgLead')endfunction -bang 参数： 在定义 Vim 自定义命令时，可以通过 -bang 参数来申明这个命令接受感叹号。比如 :q 与 :q!。下面是一个实例： 12345678fu! s:hello(bang) if a:bang echom "带有叹号" else echom "不带有叹号" endifendfcommand! -bang Hello call s:hello(&lt;bang&gt;0) 在上面的实例里，函数的参数写法为 &lt;bang&gt;0, 当执行:Hello! 时，传递给 s:hello 这一函数的参数是!0 即为 1，因此，此时看到打印了”带有叹号“。 其实除了写成 &lt;bang&gt;0, 还可以写 &lt;bang&gt;1, 甚至是 &lt;bang&gt; + 一个全局变量。比如： 123456789let g:hello = 0fu! s:hello(bang) if a:bang echom "带有叹号" else echom "不带有叹号" endifendfcommand! -bang Hello call s:hello(&lt;bang&gt;g:hello) 推荐阅读 Vim 中文简明使用教程 Vim 脚本语法指北]]></content>
      <categories>
        <category>tech</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[vim]]></title>
    <url>%2F2019%2F11%2F10%2Fvim%2F</url>
    <content type="text"><![CDATA[知识点 居中 zz: 当前行居中 zt: 当前行居屏幕顶端 zb: 当前行居屏幕底端 屏幕整体移动 c-y: 向上一行 c-e: 向下一行 输入python3执行结果 选中后执行!python3 剪贴板: &quot;ap,&quot;ay对特定寄存器操作 最近打开: Mru tab操作 tab-vim doc 上/下一个标签 向上/下移动当前标签 切换到第n个标签 关闭标签 新建标签 buffer操作: 由Mru替代 window操作 插件开发 doc sites zhihu-vim .nvimrc123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110&quot;########## general settings ##########set nuset cursorlineset smartcaseset ignorecaseset showmatchset clipboard+=unnamedplusset so=10&quot;set list&quot;set listchars=tab:&gt;~,trail:.&quot;########## indentation s##########set shiftwidth=4set softtabstop=4set tabstop=4set expandtabset breakindentset smartindentset nofoldenableset colorcolumn=80set foldmethod=manualfiletype plugin on&quot;########## plugins s##########call plug#begin(&apos;~/.vim/plugged&apos;)&quot;Plug &apos;flomotlik/vim-livereload&apos;&quot;Plug &apos;jaxbot/browserlink.vim&apos;&quot;Plug &apos;Yggdroot/indentLine&apos;Plug &apos;mileszs/ack.vim&apos;if executable(&apos;ag&apos;) let g:ackprg = &apos;ag --vimgrep&apos;endif&quot;command Todo Ack! &apos;TODO|FIXME|CHANGED|BUG|HACK&apos;&quot;command Debug Ack! &apos;NOTE|INFO|IDEA&apos;Plug &apos;Konfekt/vim-alias&apos;Plug &apos;tpope/vim-vinegar&apos;Plug &apos;ap/vim-buftabline&apos;Plug &apos;tpope/vim-commentary&apos;call plug#end()&quot;&quot;########## auto commands s##########&quot;&quot;&quot;&quot;&quot;########## custom mappings s##########&quot;let g:mapleader=&quot;\&lt;Space&gt;&quot;imap &lt;A-j&gt; &lt;Esc&gt;jimap &lt;A-k&gt; &lt;Esc&gt;kimap &lt;A-h&gt; &lt;Esc&gt;himap &lt;A-l&gt; &lt;Esc&gt;lmap &lt;C-n&gt; :bn&lt;CR&gt;map &lt;C-m&gt; :bp&lt;CR&gt;au BufWinLeave * silent! mkviewau BufWinEnter * silent! loadviewmap &lt;Up&gt; &lt;C-y&gt;map &lt;Down&gt; &lt;C-e&gt;map g1 1gtmap g2 2gtnoremap &lt;C-u&gt; :1b&lt;CR&gt;noremap &lt;C-i&gt; :2b&lt;CR&gt;noremap &lt;C-o&gt; :3b&lt;CR&gt;noremap &lt;C-p&gt; :4b&lt;CR&gt;&quot;noremap &lt;C-n&gt; :silent! tabnew&lt;CR&gt;map :conf :source $MYVIMRC&lt;CR&gt;let g:netrw_liststyle = 3let g:netrw_banner = 0function! MakeSession() let b:sessiondir = $HOME . &quot;/.vim/sessions&quot; . getcwd() if (filewritable(b:sessiondir) != 2) exe &apos;silent !mkdir -p &apos; b:sessiondir redraw! endif let b:filename = b:sessiondir . &apos;/session.vim&apos; exe &quot;mksession! &quot; . b:filenameendfunctionfunction! LoadSession() let b:sessiondir = $HOME . &quot;/.vim/sessions&quot; . getcwd() let b:sessionfile = b:sessiondir . &quot;/session.vim&quot; if (filereadable(b:sessionfile)) exe &apos;source &apos; b:sessionfile else echo &quot;No session loaded.&quot; endifendfunction&quot; Adding automatons for when entering or leaving Vim&quot;au VimEnter * nested :call LoadSession()&quot;au VimLeave * :call MakeSession()]]></content>
      <categories>
        <category>tech</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ubuntu]]></title>
    <url>%2F2019%2F11%2F10%2Fubuntu%2F</url>
    <content type="text"><![CDATA[安装 winwin-E，管理，磁盘管理 input method ibus: intelligent pinyin c-s-p: change half/full width punc c-,: 切换全角半角符号 fcitx: sogou pinyin 历史剪切板工具：copyq。]]></content>
      <categories>
        <category>tech</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[linux]]></title>
    <url>%2F2019%2F11%2F10%2Flinux%2F</url>
    <content type="text"><![CDATA[tools curl xargs echo char pictures cowsay fortune xkill xdotool ranger find: find path filter actionfind / -type f -name &quot;*.log&quot; | xargs grep &quot;ERROR&quot; 查找文件内容find / -type f -name &quot;*.log&quot; | xargs grep &quot;ERROR&quot; date 格式化输出: date &quot;%Y-%m-%d&quot; 输入法]]></content>
      <categories>
        <category>tech</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[aframe]]></title>
    <url>%2F2019%2F11%2F10%2Faframe%2F</url>
    <content type="text"><![CDATA[也就是说,第一步:控制器的链接joystick 的html5支持 joystick 连接支持123456789window.addEventListener(&quot;gamepadconnected&quot;, (event) =&gt; &#123; console.log(&quot;A gamepad connected:&quot;); console.log(event.gamepad);&#125;);window.addEventListener(&quot;gamepaddisconnected&quot;, (event) =&gt; &#123; console.log(&quot;A gamepad disconnected:&quot;); console.log(event.gamepad);&#125;); gamepadconnected events on window to get updates on the current gamepad state, you need to call navigator.getGamepads(), which returns an array of currently connected gamepads, and their current button and axis positions. Typically you’d call this function once per frame. gamepads[0][“axes”] 在完成joystick的链接之后, 自己应该完成世界的搭建平台几何图形已完成 position=”-1 0.5 -3” rotation=”0 45 0” color=”#4CC3D9”轴的方向问题:x,y,zy轴为高度 js控制camera 完成joystick对camera的全方位控制aspeed:总加速度,油门控制aspeedx,aspeedy,aspeedz:x,y,z轴方向加速度 四旋翼无人机控制原理 首先完成四旋翼无人机项目然后,将自己暴露于未知的环境中,以换取更高速度的进步可行的项目:zhihubilibili camera的角度问题aframe插件3d 旋转变换旋转坐标系将别的坐标系转换为欧拉角lookat zhihu:zhihu消息的推送,推送到telegram多线并进:bili:]]></content>
      <categories>
        <category>tech</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[latex]]></title>
    <url>%2F2019%2F11%2F10%2Flatex%2F</url>
    <content type="text"><![CDATA[知识点 $e^{j\omega}$e^{j\omega} $\sum_{n=-\infty}^{\infty}$\sum_{n=-\infty}^{\infty} sitelatex在线编辑器]]></content>
      <categories>
        <category>tech</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[blog]]></title>
    <url>%2F2019%2F11%2F10%2Fblog%2F</url>
    <content type="text"><![CDATA[知识点 markdown convert to html use_travis_deploy_github_blog_automatically https flask临时证书: 本地pip安装失败 12sudo apt-get install libssl-devpip3 install pyOpenSSL 自签名证书: openssl req -x509 -newkey rsa:4096 -nodes -out cert.pem -keyout key.pem -days 365 cert.pem存储证书,key.pem存储私匙 letsencrypt certbot: 自动化程序 html劫持 framekiller12345if(self == top) &#123; document.documentElement.style.display = &apos;block&apos;; &#125; else &#123; top.location = self.location; &#125; 配置nginx监听转发 sites]]></content>
      <categories>
        <category>tech</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[fish]]></title>
    <url>%2F2019%2F11%2F10%2Ffish%2F</url>
    <content type="text"><![CDATA[知识点 set word 23: 设置变量 echo $word {$word} $status: 上一条命令的结果 (date): 命令替换 命令组合: and/or 命令行参数: argv[0] 条件判定 重定向 sitesconfig1234567891011121314151617181920vi ~/.config/fish/config.fishset fish_greeting &apos;Talk is cheap. Show me the code.&apos;set fish_user_paths /home/gkxk/repo/binfunction sshtermux ssh u0_a182@192.168.0.143 -p 8022 #ssh u0_a182@192.168.43.1 -p 8022endfunction sshvultr mosh root@108.160.135.157endalias vi nvimalias r rangeralias t tmuxalias lt &quot;ls -t&quot;set EDITOR nvim]]></content>
      <categories>
        <category>tech</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[adb]]></title>
    <url>%2F2019%2F11%2F09%2Fadb%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139#!/bin/bashlogin()&#123; adb shell input keyevent 223 # close screen sleep 1 adb shell input keyevent 223 # close screen sleep 1 adb shell input keyevent 223 # close screen sleep 1 adb shell input keyevent 223 # close screen sleep 1 adb shell input keyevent 224 # open screen sleep 1 adb shell input keyevent SPACE sleep 1 adb shell input text 1111 sleep 1 adb shell input keyevent HOME # enter home sleep 1 adb shell input keyevent MENU # enter process manage sleep 1 adb shell input tap 550 2000 # erase all sleep 3 adb shell input tap 650 200 # enter bili sleep 8 adb shell input tap 270 270 sleep 1 adb shell input tap 50 100 # sidebar sleep 1 adb shell input tap 120 2100 # setting sleep 1 adb shell input swipe 500 1000 500 500 # scroll to bottom sleep 1 adb shell input tap 500 2050 # exit sleep 1 adb shell input keyevent TAB sleep 1 adb shell input keyevent TAB sleep 1 adb shell input keyevent ENTER sleep 1 adb shell input keyevent SEARCH sleep 1 adb shell input text av25618330 # enter av numbere sleep 1 adb shell input keyevent ENTER # enter video sleep 10 adb shell input tap 950 1100 # click share button sleep 1 adb shell input tap 110 1500 # share to bili sleep 1 adb shell input text $1 # enter account sleep 1 adb shell input tap 500 1200 # hide autocomplete sleep 1 adb shell input tap 500 750 # click passwd input sleep 1 adb shell input text 123zxcbl # enter passwd sleep 1 adb shell input tap 800 900 # click login sleep 1 adb shell input text $(/home/gkxk/repo/bin/funwords) # enter passwd sleep 5 adb shell input tap 1000 150 # click publish sleep 1 adb shell input keyevent HOME # enter home sleep 1 adb shell input keyevent MENU # enter process manage sleep 1 adb shell input tap 550 2000 # erase all sleep 3 adb shell input tap 650 200 # enter bili sleep 8 adb shell input tap 270 270 sleep 1 adb shell input tap 50 100 # sidebar sleep 1 adb shell input tap 150 700 # enter personal space sleep 10 adb shell input tap 1000 1000 # manage blog sleep 1 adb shell input tap 500 1900 # delete sleep 1 adb shell input keyevent TAB sleep 1 adb shell input keyevent TAB sleep 1 adb shell input keyevent ENTER sleep 1 adb shell input keyevent HOME # enter home sleep 1 adb shell input keyevent MENU # enter process manage sleep 1 adb shell input tap 550 2000 # erase all sleep 3 adb shell input keyevent 223 # close screen sleep 1&#125;curday=`date +%Y-%m-%d`logday=`tail /home/gkxk/repo/bin/.bpoint.txt -n 1`if [ $curday = $logday ];then echo equalelif [ `adb devices|wc -l` = 3 ];then echo $curday &gt;&gt; /home/gkxk/repo/bin/.bpoint.txt login 1860 login 1860 echo $curday &gt;&gt; /home/gkxk/repo/bin/.bpoint.txtfi written by gkxk at 2019-09-21 00:28 keyevent list12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485860 --&gt; &quot;KEYCODE_UNKNOWN&quot; 1 --&gt; &quot;KEYCODE_MENU&quot; 2 --&gt; &quot;KEYCODE_SOFT_RIGHT&quot; 3 --&gt; &quot;KEYCODE_HOME&quot; 4 --&gt; &quot;KEYCODE_BACK&quot; 5 --&gt; &quot;KEYCODE_CALL&quot; 6 --&gt; &quot;KEYCODE_ENDCALL&quot; 7 --&gt; &quot;KEYCODE_0&quot; 8 --&gt; &quot;KEYCODE_1&quot; 9 --&gt; &quot;KEYCODE_2&quot; 10 --&gt; &quot;KEYCODE_3&quot; 11 --&gt; &quot;KEYCODE_4&quot; 12 --&gt; &quot;KEYCODE_5&quot; 13 --&gt; &quot;KEYCODE_6&quot; 14 --&gt; &quot;KEYCODE_7&quot; 15 --&gt; &quot;KEYCODE_8&quot; 16 --&gt; &quot;KEYCODE_9&quot; 17 --&gt; &quot;KEYCODE_STAR&quot; 18 --&gt; &quot;KEYCODE_POUND&quot; 19 --&gt; &quot;KEYCODE_DPAD_UP&quot; 20 --&gt; &quot;KEYCODE_DPAD_DOWN&quot; 21 --&gt; &quot;KEYCODE_DPAD_LEFT&quot; 22 --&gt; &quot;KEYCODE_DPAD_RIGHT&quot; 23 --&gt; &quot;KEYCODE_DPAD_CENTER&quot; 24 --&gt; &quot;KEYCODE_VOLUME_UP&quot; 25 --&gt; &quot;KEYCODE_VOLUME_DOWN&quot; 26 --&gt; &quot;KEYCODE_POWER&quot; 27 --&gt; &quot;KEYCODE_CAMERA&quot; 28 --&gt; &quot;KEYCODE_CLEAR&quot; 29 --&gt; &quot;KEYCODE_A&quot; 30 --&gt; &quot;KEYCODE_B&quot; 31 --&gt; &quot;KEYCODE_C&quot; 32 --&gt; &quot;KEYCODE_D&quot; 33 --&gt; &quot;KEYCODE_E&quot; 34 --&gt; &quot;KEYCODE_F&quot; 35 --&gt; &quot;KEYCODE_G&quot; 36 --&gt; &quot;KEYCODE_H&quot; 37 --&gt; &quot;KEYCODE_I&quot; 38 --&gt; &quot;KEYCODE_J&quot; 39 --&gt; &quot;KEYCODE_K&quot; 40 --&gt; &quot;KEYCODE_L&quot; 41 --&gt; &quot;KEYCODE_M&quot; 42 --&gt; &quot;KEYCODE_N&quot; 43 --&gt; &quot;KEYCODE_O&quot; 44 --&gt; &quot;KEYCODE_P&quot; 45 --&gt; &quot;KEYCODE_Q&quot; 46 --&gt; &quot;KEYCODE_R&quot; 47 --&gt; &quot;KEYCODE_S&quot; 48 --&gt; &quot;KEYCODE_T&quot; 49 --&gt; &quot;KEYCODE_U&quot; 50 --&gt; &quot;KEYCODE_V&quot; 51 --&gt; &quot;KEYCODE_W&quot; 52 --&gt; &quot;KEYCODE_X&quot; 53 --&gt; &quot;KEYCODE_Y&quot; 54 --&gt; &quot;KEYCODE_Z&quot; 55 --&gt; &quot;KEYCODE_COMMA&quot; 56 --&gt; &quot;KEYCODE_PERIOD&quot; 57 --&gt; &quot;KEYCODE_ALT_LEFT&quot; 58 --&gt; &quot;KEYCODE_ALT_RIGHT&quot; 59 --&gt; &quot;KEYCODE_SHIFT_LEFT&quot; 60 --&gt; &quot;KEYCODE_SHIFT_RIGHT&quot; 61 --&gt; &quot;KEYCODE_TAB&quot; 62 --&gt; &quot;KEYCODE_SPACE&quot; 63 --&gt; &quot;KEYCODE_SYM&quot; 64 --&gt; &quot;KEYCODE_EXPLORER&quot; 65 --&gt; &quot;KEYCODE_ENVELOPE&quot; 66 --&gt; &quot;KEYCODE_ENTER&quot; 67 --&gt; &quot;KEYCODE_DEL&quot; 68 --&gt; &quot;KEYCODE_GRAVE&quot; 69 --&gt; &quot;KEYCODE_MINUS&quot; 70 --&gt; &quot;KEYCODE_EQUALS&quot; 71 --&gt; &quot;KEYCODE_LEFT_BRACKET&quot; 72 --&gt; &quot;KEYCODE_RIGHT_BRACKET&quot; 73 --&gt; &quot;KEYCODE_BACKSLASH&quot; 74 --&gt; &quot;KEYCODE_SEMICOLON&quot; 75 --&gt; &quot;KEYCODE_APOSTROPHE&quot; 76 --&gt; &quot;KEYCODE_SLASH&quot; 77 --&gt; &quot;KEYCODE_AT&quot; 78 --&gt; &quot;KEYCODE_NUM&quot; 79 --&gt; &quot;KEYCODE_HEADSETHOOK&quot; 80 --&gt; &quot;KEYCODE_FOCUS&quot; 81 --&gt; &quot;KEYCODE_PLUS&quot; 82 --&gt; &quot;KEYCODE_MENU&quot; 83 --&gt; &quot;KEYCODE_NOTIFICATION&quot; 84 --&gt; &quot;KEYCODE_SEARCH&quot; 85 --&gt; &quot;TAG_LAST_KEYCODE&quot;]]></content>
      <categories>
        <category>tech</category>
      </categories>
  </entry>
</search>
